using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using TangoBot.API.DI;
using TangoBot.API.Logging;

namespace TangoBot.DependecyInjection
{
    public class TangoBotServiceLocator
    {
        private static readonly ConcurrentDictionary<string, Type> namedServices = new();
        private static readonly ConcurrentDictionary<string, object> singletonInstances = new();
        private static readonly ConcurrentDictionary<string, ServiceDefinition> serviceDefinitions = new();
        private static readonly object serviceCollectionLock = new();
        private static bool isInitialized = false;
        private static API.Logging.ILoggingServiceWrapper<TangoBotServiceLocator>? _logger;


        /// <summary>
        /// Initializes the service locator by discovering and registering services.
        /// </summary>
        public static void Initialize()
        {
            if (isInitialized)
            {
                return;
            }

            lock (serviceCollectionLock)
            {
                if (isInitialized)
                {
                    return;
                }

                DiscoverAndRegisterServices();
                isInitialized = true;

                _logger = GetSingletonService<ILoggingServiceWrapper<TangoBotServiceLocator>>() ?? throw new Exception("Logger could not be loaded");

            }
        }

        /// <summary>
        /// Gets a singleton service instance.
        /// </summary>
        /// <typeparam name="T">The type of the service.</typeparam>
        /// <param name="name">The fully qualified name of the service implementation class (optional).</param>
        /// <returns>The service instance, or null if not found.</returns>
        public static T? GetSingletonService<T>(string name = "") where T : class
        {
            if (!isInitialized)
            {
                Initialize();
            }

            var serviceType = DiscoverServiceType<T>(name) ?? throw new Exception($"Service implementation '{name}' not found for interface '{typeof(T).Name}'");

            name = LevelName(name, serviceType);

            if (!singletonInstances.ContainsKey(name))
            {
                lock (serviceCollectionLock)
                {
                    if (!singletonInstances.ContainsKey(name))
                    {
                        var instance = Activator.CreateInstance(serviceType) ?? throw new Exception($"Failed to create instance of type '{serviceType.FullName}'");
                        singletonInstances[name] = instance;
                    }
                }
            }

            return singletonInstances[name] as T;
        }

        /// <summary>
        /// Gets a transient service instance.
        /// </summary>
        /// <typeparam name="T">The type of the service.</typeparam>
        /// <param name="qualifiedName">The fully qualified name of the service implementation class (optional).</param>
        /// <returns>The service instance, or null if not found.</returns>
        public static T? GetTransientService<T>(string qualifiedName = "") where T : class
        {
            if (!isInitialized)
            {
                Initialize();
            }

            var serviceType = DiscoverServiceType<T>(qualifiedName) ?? throw new Exception($"Service implementation '{qualifiedName}' not found for interface '{typeof(T).Name}'");

            return Activator.CreateInstance(serviceType) as T;
        }

        /// <summary>
        /// Discovers and registers services implementing ITTService.
        /// </summary>
        private static void DiscoverAndRegisterServices()
        {
            var currentAssembly = Assembly.GetExecutingAssembly();
            var parentDirectory = (Directory.GetParent(currentAssembly.Location)?.Parent?.Parent?.FullName) ?? throw new Exception("Parent directory not found.");

            var assemblies = Directory.GetFiles(parentDirectory, "*.dll", SearchOption.AllDirectories)
                 .Where(IsAssembly)
                 .Select(Assembly.LoadFrom)
                 .Where(ServiceLocatorHelper.IsSolutionAssembly)
                 .ToList();

            foreach (var assembly in assemblies)
            {
                var serviceTypes = assembly.GetTypes()
                    .Where(t => t.IsClass && !t.IsAbstract && typeof(ITTService).IsAssignableFrom(t))
                    .ToList();

                foreach (var service in serviceTypes)
                {
                    //_logger.LogInformation("Service: {service}", service.FullName);
                    service.GetInterfaces().ToList().ForEach(i => {
                        //_logger.LogInformation("Interface: {interface}", i.FullName);
                        if(i.FullName.Equals("TangoBot.API.DI.ITTService"))
                        {
                            return;
                        }
                        var serviceDefinition = new ServiceDefinition(i.FullName, service.FullName, assembly);
                        serviceDefinitions[i.FullName] = serviceDefinition;
                    });

                }


                foreach (var serviceType in serviceTypes)
                {
                    var interfaceTypes = serviceType.GetInterfaces().Where(i => typeof(ITTService).IsAssignableFrom(i));
                    foreach (var interfaceType in interfaceTypes)
                    {
                        var name = LevelName(serviceType.FullName, serviceType);
                        namedServices[name] = serviceType;

                        //var serviceDefinition = new ServiceDefinition(interfaceType.FullName, serviceType.FullName, assembly);
                        //serviceDefinitions[interfaceType.FullName] = serviceDefinition;
                    }
                }
            }
        }

        /// <summary>
        /// Discovers the service type that implements the specified interface and matches the given name.
        /// </summary>
        /// <typeparam name="T">The type of the service interface.</typeparam>
        /// <param name="name">The fully qualified name of the service implementation class (optional).</param>
        /// <returns>The service type, or null if not found.</returns>
        private static Type? DiscoverServiceType<T>(string name) where T : class
        {
            var interfaceType = typeof(T);

            if (string.IsNullOrEmpty(name))
            {
                return namedServices.Values.FirstOrDefault(t => interfaceType.IsAssignableFrom(t));
            }

            name = LevelName(name, interfaceType);
            return namedServices.ContainsKey(name) ? namedServices[name] : null;
        }

        /// <summary>
        /// Reformats the name to be used as a dictionary key.
        /// </summary>
        /// <param name="name">The original name.</param>
        /// <param name="serviceType">The service type.</param>
        /// <returns>The reformatted name.</returns>
        private static string LevelName(string? name, Type serviceType)
        {
            name = string.IsNullOrEmpty(name) ? serviceType.FullName : name;
            return Regex.Replace(name, @"[^a-zA-Z0-9_]", "_");
        }

        /// <summary>
        /// Checks if the file is a valid .NET assembly.
        /// </summary>
        /// <param name="filePath">The file path.</param>
        /// <returns>True if the file is a valid .NET assembly, otherwise false.</returns>
        private static bool IsAssembly(string filePath)
        {
            try
            {
                AssemblyName.GetAssemblyName(filePath);
                return true;
            }
            catch (BadImageFormatException)
            {
                return false;
            }
            catch (FileLoadException)
            {
                return false;
            }
        }
    }

    internal class ServiceDefinition { 
        public string InterfaceFullName { get; set; }
        public string ImplementationFullName { get; set; }

        public Assembly Assembly { get; set; }

        public object? SingletonInstance { get; set; }

        public ServiceDefinition(string serviceFullName, string implementationFullName, Assembly assembly)
        {
            InterfaceFullName = serviceFullName;
            ImplementationFullName = implementationFullName;
            Assembly = assembly;

        }
    }
}
